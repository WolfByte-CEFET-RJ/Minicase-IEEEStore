const adminServices = require("../services/adminServices");


async function loginAdmin(req,res){
    try{
        const { cpf, senha} = req.body;
        const loginService = await adminServices.loginAdmin(cpf,senha);
        res.json({status: true, message: loginService});
        console.log("Controlador executado.");
    }catch(error){
        console.log(error);
        res.json({status:false, message: error.message});
    }
}

async function viewAdmin(req,res){
    try{
        const {id} = req.params;
        if (parseInt(req.userId) !== parseInt(id)) {
            return res.status(403).json({ status: false, message: "Acesso negado." });
        }
        const viewService = await adminServices.viewAdmin(id);

        res.status(200).json({status: true, message: viewService})
        console.log("Controlador executado.")
    }catch(err){
        console.log(err);
        res.status(500).json({status:false,message:err.message})
    }
}

async function createAdmin(req, res){
    try{
    const {nome, cargo, cpf, telefone, senha} = req.body;
    console.log("Parouuu")
    console.log("REQ.BODY:", req.body); 
    
    const createService = await adminServices.createAdmin({nome, cargo, cpf, telefone, senha});
    console.log("Passou aqui");
    res.json({status: true, message: createService});
    console.log("Controlador executado.");

    }catch(erro){
        console.log(erro);
        res.json({status: false, message: erro.message});
    }
}

async function updateAdmin(req, res) {
    try {
        const { id } = req.params;

        if (parseInt(req.userId) !== parseInt(id)) {
            return res.status(403).json({ status: false, message: "Acesso negado." });
        }

        const { nome, cargo, cpf, telefone, senha } = req.body;
        const updateService = await adminServices.updateAdmin(id, nome, cargo, cpf, telefone, senha);

        res.json({ status: true, message: updateService });
        console.log("Controlador executado.");
    } catch (error) {
        console.log(error);
        res.json({ status: false, message: error.message });
    }
}

async function adminCreationPower(req,res){
    try{
        const {cpf,senha, novoAdmin} = req.body;
        console.log("Corpo da requisição:", req.body);
        
        const checkAdminService = await adminServices.checkAdmin(cpf,senha);
        if(!checkAdminService){
            return res.status(403).json({status:false, message: "Você não tem permissão pra criar um administrador"})
        }
        //console.log("Se liga queridaooo", JSON.stringify(novoAdmin, null, 2))
        const { nome, cargo, cpfNovo, telefone, senhaNovo } = novoAdmin || {};
        console.log("Olha eu aqui antes do serviee")
        console.log(`Se liga aqui ${cpfNovo}`)
        //o problema é essa const criarAdminService
        const criarAdminService = await adminServices.createAdmin({
            nome,
            cargo,
            cpf: cpfNovo,
            telefone,
            senha: senhaNovo
        });
        console.log("Olha eu aq no service")
        
        return res.json({status:true,message: criarAdminService})
    }catch(err){
        console.log("Fudeu")
        res.status(500).json({status: false, message:err.message});
    }
}

async function deleteAdmin(req, res) {
    try {
        const { id } = req.params;
        if (parseInt(req.userId) !== parseInt(id)) {
            return res.status(403).json({ status: false, message: "Acesso negado." });
        }
        const deleteAdmin = await adminServices.deleteAdmin(id);
        res.json({ status: true, message: deleteAdmin });
        console.log("Controlador executado.");
    } catch (error) {
        console.log(error);
        return res.status(500).json({ status: false, message: error.message });
    }
}

module.exports = {
    createAdmin,updateAdmin,deleteAdmin,loginAdmin,viewAdmin,adminCreationPower
}